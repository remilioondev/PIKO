(() => { "use strict"; const t = {}; function e() { if (location.hash) return location.hash.replace("#", "") } let o = !0, s = (t = 500) => { if (o) { const e = document.querySelectorAll("[data-lp]"); setTimeout((() => { e.forEach((t => { t.style.paddingRight = "" })), document.body.style.paddingRight = "", document.documentElement.classList.remove("lock") }), t), o = !1, setTimeout((function () { o = !0 }), t) } }, a = (t = 500) => { if (o) { const e = document.querySelectorAll("[data-lp]"), s = window.innerWidth - document.body.offsetWidth + "px"; e.forEach((t => { t.style.paddingRight = s })), document.body.style.paddingRight = s, document.documentElement.classList.add("lock"), o = !1, setTimeout((function () { o = !0 }), t) } }; function n() { s(), document.documentElement.classList.remove("menu-open") } function i(t) { setTimeout((() => { window.FLS && console.log(t) }), 0) } function r(t) { return t.filter((function (t, e, o) { return o.indexOf(t) === e })) } let c = (t, e = !1, o = 500, s = 0) => { const a = document.querySelector(t); if (a) { let r = "", c = 0; if (e) { r = "header.header"; const t = document.querySelector(r); t.classList.contains("_header-scroll") ? c = t.offsetHeight : (t.style.cssText = "transition-duration: 0s;", t.classList.add("_header-scroll"), c = t.offsetHeight, t.classList.remove("_header-scroll"), setTimeout((() => { t.style.cssText = "" }), 0)) } let l = { speedAsDuration: !0, speed: o, header: r, offset: s, easing: "easeOutQuad" }; if (document.documentElement.classList.contains("menu-open") && n(), "undefined" != typeof SmoothScroll) (new SmoothScroll).animateScroll(a, "", l); else { let t = a.getBoundingClientRect().top + scrollY; t = c ? t - c : t, t = s ? t - s : t, window.scrollTo({ top: t, behavior: "smooth" }) } i(`[gotoBlock]: Юхуу...їдемо до ${t}`) } else i(`[gotoBlock]: Йой... Такого блоку немає на сторінці: ${t}`) }; t.watcher = new class { constructor(t) { this.config = Object.assign({ logging: !0 }, t), this.observer, !document.documentElement.classList.contains("watcher") && this.scrollWatcherRun() } scrollWatcherUpdate() { this.scrollWatcherRun() } scrollWatcherRun() { document.documentElement.classList.add("watcher"), this.scrollWatcherConstructor(document.querySelectorAll("[data-watch]")) } scrollWatcherConstructor(t) { if (t.length) { this.scrollWatcherLogging(`Прокинувся, стежу за об'єктами (${t.length})...`), r(Array.from(t).map((function (t) { if ("navigator" === t.dataset.watch && !t.dataset.watchThreshold) { let e; t.clientHeight > 2 ? (e = window.innerHeight / 2 / (t.clientHeight - 1), e > 1 && (e = 1)) : e = 1, t.setAttribute("data-watch-threshold", e.toFixed(2)) } return `${t.dataset.watchRoot ? t.dataset.watchRoot : null}|${t.dataset.watchMargin ? t.dataset.watchMargin : "0px"}|${t.dataset.watchThreshold ? t.dataset.watchThreshold : 0}` }))).forEach((e => { let o = e.split("|"), s = { root: o[0], margin: o[1], threshold: o[2] }, a = Array.from(t).filter((function (t) { let e = t.dataset.watchRoot ? t.dataset.watchRoot : null, o = t.dataset.watchMargin ? t.dataset.watchMargin : "0px", a = t.dataset.watchThreshold ? t.dataset.watchThreshold : 0; if (String(e) === s.root && String(o) === s.margin && String(a) === s.threshold) return t })), n = this.getScrollWatcherConfig(s); this.scrollWatcherInit(a, n) })) } else this.scrollWatcherLogging("Сплю, немає об'єктів для стеження. ZzzZZzz") } getScrollWatcherConfig(t) { let e = {}; if (document.querySelector(t.root) ? e.root = document.querySelector(t.root) : "null" !== t.root && this.scrollWatcherLogging(`Эмм... батьківського об'єкта ${t.root} немає на сторінці`), e.rootMargin = t.margin, !(t.margin.indexOf("px") < 0 && t.margin.indexOf("%") < 0)) { if ("prx" === t.threshold) { t.threshold = []; for (let e = 0; e <= 1; e += .005)t.threshold.push(e) } else t.threshold = t.threshold.split(","); return e.threshold = t.threshold, e } this.scrollWatcherLogging("йой, налаштування data-watch-margin потрібно задавати в PX або %") } scrollWatcherCreate(t) { this.observer = new IntersectionObserver(((t, e) => { t.forEach((t => { this.scrollWatcherCallback(t, e) })) }), t) } scrollWatcherInit(t, e) { this.scrollWatcherCreate(e), t.forEach((t => this.observer.observe(t))) } scrollWatcherIntersecting(t, e) { t.isIntersecting ? (!e.classList.contains("_watcher-view") && e.classList.add("_watcher-view"), this.scrollWatcherLogging(`Я бачу ${e.classList}, додав клас _watcher-view`)) : (e.classList.contains("_watcher-view") && e.classList.remove("_watcher-view"), this.scrollWatcherLogging(`Я не бачу ${e.classList}, прибрав клас _watcher-view`)) } scrollWatcherOff(t, e) { e.unobserve(t), this.scrollWatcherLogging(`Я перестав стежити за ${t.classList}`) } scrollWatcherLogging(t) { this.config.logging && i(`[Спостерігач]: ${t}`) } scrollWatcherCallback(t, e) { const o = t.target; this.scrollWatcherIntersecting(t, o), o.hasAttribute("data-watch-once") && t.isIntersecting && this.scrollWatcherOff(o, e), document.dispatchEvent(new CustomEvent("watcherCallback", { detail: { entry: t } })) } }({}); class l { constructor(t) { t.length && (this.elements = Array.from(t).map((t => new l.Each(t, this.options)))) } destroyEvents() { this.elements.forEach((t => { t.destroyEvents() })) } setEvents() { this.elements.forEach((t => { t.setEvents() })) } } l.Each = class { constructor(t) { this.parent = t, this.elements = this.parent.querySelectorAll("[data-prlx]"), this.animation = this.animationFrame.bind(this), this.offset = 0, this.value = 0, this.smooth = t.dataset.prlxSmooth ? Number(t.dataset.prlxSmooth) : 15, this.setEvents() } setEvents() { this.animationID = window.requestAnimationFrame(this.animation) } destroyEvents() { window.cancelAnimationFrame(this.animationID) } animationFrame() { const t = this.parent.getBoundingClientRect().top, e = this.parent.offsetHeight, o = window.innerHeight, s = t - o, a = t + e, n = this.parent.dataset.prlxCenter ? this.parent.dataset.prlxCenter : "center"; if (s < 30 && a > -30) switch (n) { case "top": this.offset = -1 * t; break; case "center": this.offset = o / 2 - (t + e / 2); break; case "bottom": this.offset = o - (t + e) }this.value += (this.offset - this.value) / this.smooth, this.animationID = window.requestAnimationFrame(this.animation), this.elements.forEach((t => { const e = { axis: t.dataset.axis ? t.dataset.axis : "v", direction: t.dataset.direction ? t.dataset.direction + "1" : "-1", coefficient: t.dataset.coefficient ? Number(t.dataset.coefficient) : 5, additionalProperties: t.dataset.properties ? t.dataset.properties : "" }; this.parameters(t, e) })) } parameters(t, e) { "v" == e.axis ? t.style.transform = `translate3D(0, ${(e.direction * (this.value / e.coefficient)).toFixed(2)}px,0) ${e.additionalProperties}` : "h" == e.axis && (t.style.transform = `translate3D(${(e.direction * (this.value / e.coefficient)).toFixed(2)}px,0,0) ${e.additionalProperties}`) } }, document.querySelectorAll("[data-prlx-parent]") && (t.parallax = new l(document.querySelectorAll("[data-prlx-parent]"))); let d = !1; setTimeout((() => { if (d) { let t = new Event("windowScroll"); window.addEventListener("scroll", (function (e) { document.dispatchEvent(t) })) } }), 0); new class { constructor(t) { this.type = t } init() { this.оbjects = [], this.daClassname = "_dynamic_adapt_", this.nodes = [...document.querySelectorAll("[data-da]")], this.nodes.forEach((t => { const e = t.dataset.da.trim().split(","), o = {}; o.element = t, o.parent = t.parentNode, o.destination = document.querySelector(`${e[0].trim()}`), o.breakpoint = e[1] ? e[1].trim() : "767.98", o.place = e[2] ? e[2].trim() : "last", o.index = this.indexInParent(o.parent, o.element), this.оbjects.push(o) })), this.arraySort(this.оbjects), this.mediaQueries = this.оbjects.map((({ breakpoint: t }) => `(${this.type}-width: ${t / 16}em),${t}`)).filter(((t, e, o) => o.indexOf(t) === e)), this.mediaQueries.forEach((t => { const e = t.split(","), o = window.matchMedia(e[0]), s = e[1], a = this.оbjects.filter((({ breakpoint: t }) => t === s)); o.addEventListener("change", (() => { this.mediaHandler(o, a) })), this.mediaHandler(o, a) })) } mediaHandler(t, e) { t.matches ? e.forEach((t => { this.moveTo(t.place, t.element, t.destination) })) : e.forEach((({ parent: t, element: e, index: o }) => { e.classList.contains(this.daClassname) && this.moveBack(t, e, o) })) } moveTo(t, e, o) { e.classList.add(this.daClassname), "last" === t || t >= o.children.length ? o.append(e) : "first" !== t ? o.children[t].before(e) : o.prepend(e) } moveBack(t, e, o) { e.classList.remove(this.daClassname), void 0 !== t.children[o] ? t.children[o].before(e) : t.append(e) } indexInParent(t, e) { return [...t.children].indexOf(e) } arraySort(t) { "min" === this.type ? t.sort(((t, e) => t.breakpoint === e.breakpoint ? t.place === e.place ? 0 : "first" === t.place || "last" === e.place ? -1 : "last" === t.place || "first" === e.place ? 1 : 0 : t.breakpoint - e.breakpoint)) : t.sort(((t, e) => t.breakpoint === e.breakpoint ? t.place === e.place ? 0 : "first" === t.place || "last" === e.place ? 1 : "last" === t.place || "first" === e.place ? -1 : 0 : e.breakpoint - t.breakpoint)) } }("max").init(); const h = document.querySelector(".hero"), u = document.querySelector(".hero__bg"), m = document.querySelector(".hero__title"), f = document.querySelector(".hero__front"), g = document.querySelector(".hero__container"); const p = document.querySelector(".join"), w = document.querySelector(".join__bg"), y = document.querySelector(".join__title"), v = document.querySelector(".join__actions"); async function S(t) { try { const e = t.target.closest(".copy-ca-btn").querySelector("span").textContent.trim();
 await navigator.clipboard.writeText(e), alert("Address copied successfully") } catch (t) { console.error(t.message) } } window.onscroll = () => { window.scrollY - (p.getBoundingClientRect().top + window.scrollY) >= 0 && window.innerWidth > 767.98 && function () { const t = p.offsetHeight, e = (window.scrollY - (p.getBoundingClientRect().top + window.scrollY)) / t; w.style.transform = `translateY(${e * t / 1.8}px)`, y.style.transform = `translateY(${e * t / 2.6}px)`, v.style.transform = `translateY(${e * t / 6}px)` }(), window.scrollY <= h.offsetHeight && function () { const t = window.scrollY, e = h.offsetHeight, o = t / e; u.style.transform = `translateY(${o * e / 2}px)`, m.style.transform = `translateY(${o * e / 3}px)`, f.style.transform = `translateY(${o * e / 5}px)`, g.style.transform = `translateY(${o * e / 10}px)` }() }; document.querySelectorAll(".copy-ca-btn").forEach((t => { t.onclick = S })), window.FLS = !1, document.documentElement.classList.contains("loading") || window.addEventListener("load", (function () { setTimeout((function () { document.documentElement.classList.add("loaded") }), 0) })), document.querySelector(".icon-menu") && document.addEventListener("click", (function (t) { o && t.target.closest(".icon-menu") && (((t = 500) => { document.documentElement.classList.contains("lock") ? s(t) : a(t) })(), document.documentElement.classList.toggle("menu-open")) })), function () { function o(e) { if ("click" === e.type) { const o = e.target; if (o.closest("[data-goto]")) { const s = o.closest("[data-goto]"), a = s.dataset.goto ? s.dataset.goto : "", i = !!s.hasAttribute("data-goto-header"), r = s.dataset.gotoSpeed ? s.dataset.gotoSpeed : 500, l = s.dataset.gotoTop ? parseInt(s.dataset.gotoTop) : 0; if (t.fullpage) { const e = document.querySelector(`${a}`).closest("[data-fp-section]"), o = e ? +e.dataset.fpId : null; null !== o && (t.fullpage.switchingSection(o), document.documentElement.classList.contains("menu-open") && n()) } else c(a, i, r, l); e.preventDefault() } } else if ("watcherCallback" === e.type && e.detail) { const t = e.detail.entry, o = t.target; if ("navigator" === o.dataset.watch) { document.querySelector("[data-goto]._navigator-active"); let e; if (o.id && document.querySelector(`[data-goto="#${o.id}"]`)) e = document.querySelector(`[data-goto="#${o.id}"]`); else if (o.classList.length) for (let t = 0; t < o.classList.length; t++) { const s = o.classList[t]; if (document.querySelector(`[data-goto=".${s}"]`)) { e = document.querySelector(`[data-goto=".${s}"]`); break } } t.isIntersecting ? e && e.classList.add("_navigator-active") : e && e.classList.remove("_navigator-active") } } } if (document.addEventListener("click", o), document.addEventListener("watcherCallback", o), e()) { let t; document.querySelector(`#${e()}`) ? t = `#${e()}` : document.querySelector(`.${e()}`) && (t = `.${e()}`), t && c(t, !0, 500, 20) } }() })();